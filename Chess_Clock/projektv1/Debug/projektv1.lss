
projektv1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000047a  0000050e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000047a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080010a  0080010a  00000518  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ce1  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0d  00000000  00000000  000012c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e4  00000000  00000000  00001cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  000021bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000628  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000349  00000000  00000000  00002900  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002c49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_3>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f4 e0       	ldi	r31, 0x04	; 4
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	aa 30       	cpi	r26, 0x0A	; 10
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	aa e0       	ldi	r26, 0x0A	; 10
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a9 31       	cpi	r26, 0x19	; 25
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 ba 01 	call	0x374	; 0x374 <main>
  ea:	0c 94 3b 02 	jmp	0x476	; 0x476 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <_Z11init_timer1v>:
volatile uint8_t start_flag = 0;
volatile uint8_t stop_flag = 0;

void init_timer1() {
	// Konfiguracja Timer1
	TCCR1B |= (1 << WGM12); // Tryb CTC
  f2:	e1 e8       	ldi	r30, 0x81	; 129
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 60       	ori	r24, 0x08	; 8
  fa:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS12) | (1 << CS10); // Preskaler 1024
  fc:	80 81       	ld	r24, Z
  fe:	85 60       	ori	r24, 0x05	; 5
 100:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); // W³¹czenie przerwania porównawczego Timer1
 102:	ef e6       	ldi	r30, 0x6F	; 111
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	80 83       	st	Z, r24
	OCR1A = 15624; // Wartoœæ porównawcza dla opóŸnienia 1 sekundy przy preskalerze 1024 i 16 MHz
 10c:	88 e0       	ldi	r24, 0x08	; 8
 10e:	9d e3       	ldi	r25, 0x3D	; 61
 110:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 114:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	sei(); // W³¹czenie globalnych przerwañ
 118:	78 94       	sei
 11a:	08 95       	ret

0000011c <__vector_11>:
}

ISR(TIMER1_COMPA_vect) {
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
	delay_counter++; // Inkrementacja licznika opóŸnienia
 12a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <delay_counter>
 12e:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <delay_counter+0x1>
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <delay_counter+0x1>
 138:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <delay_counter>
}
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <_Z12init_buttonsv>:

void init_buttons() {
	// Konfiguracja pinów PB0-PB3 jako wejœcia z podci¹gniêciem
	DDRB &= ~((1 << DDB0) | (1 << DDB1) | (1 << DDB2) | (1 << DDB3));
 14a:	84 b1       	in	r24, 0x04	; 4
 14c:	80 7f       	andi	r24, 0xF0	; 240
 14e:	84 b9       	out	0x04, r24	; 4
	PORTB |= ((1 << PORTB0) | (1 << PORTB1) | (1 << PORTB2) | (1 << PORTB3));
 150:	85 b1       	in	r24, 0x05	; 5
 152:	8f 60       	ori	r24, 0x0F	; 15
 154:	85 b9       	out	0x05, r24	; 5

	// Konfiguracja pinu PB7 jako wejœcie z podci¹gniêciem
	DDRB &= ~(1 << DDB7);
 156:	84 b1       	in	r24, 0x04	; 4
 158:	8f 77       	andi	r24, 0x7F	; 127
 15a:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PORTB7);
 15c:	85 b1       	in	r24, 0x05	; 5
 15e:	80 68       	ori	r24, 0x80	; 128
 160:	85 b9       	out	0x05, r24	; 5

	// W³¹czenie przerwania na zmianê stanu pinów PB0-PB3 i PB7
	PCICR |= (1 << PCIE0);
 162:	e8 e6       	ldi	r30, 0x68	; 104
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0) | (1 << PCINT1) | (1 << PCINT2) | (1 << PCINT3) | (1 << PCINT7);
 16c:	eb e6       	ldi	r30, 0x6B	; 107
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	8f 68       	ori	r24, 0x8F	; 143
 174:	80 83       	st	Z, r24
 176:	08 95       	ret

00000178 <_Z15simple_delay_msj>:
}

void simple_delay_ms(uint16_t ms) {
	// Proste opóŸnienie w milisekundach
	for (uint16_t i = 0; i < ms; i++) {
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	50 e0       	ldi	r21, 0x00	; 0
 17c:	48 17       	cp	r20, r24
 17e:	59 07       	cpc	r21, r25
 180:	68 f4       	brcc	.+26     	; 0x19c <_Z15simple_delay_msj+0x24>
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 e0       	ldi	r19, 0x00	; 0
		for (uint16_t j = 0; j < 1000; j++) {
 186:	28 3e       	cpi	r18, 0xE8	; 232
 188:	63 e0       	ldi	r22, 0x03	; 3
 18a:	36 07       	cpc	r19, r22
 18c:	20 f4       	brcc	.+8      	; 0x196 <_Z15simple_delay_msj+0x1e>
			asm volatile("nop");
 18e:	00 00       	nop
}

void simple_delay_ms(uint16_t ms) {
	// Proste opóŸnienie w milisekundach
	for (uint16_t i = 0; i < ms; i++) {
		for (uint16_t j = 0; j < 1000; j++) {
 190:	2f 5f       	subi	r18, 0xFF	; 255
 192:	3f 4f       	sbci	r19, 0xFF	; 255
 194:	f8 cf       	rjmp	.-16     	; 0x186 <_Z15simple_delay_msj+0xe>
	PCMSK0 |= (1 << PCINT0) | (1 << PCINT1) | (1 << PCINT2) | (1 << PCINT3) | (1 << PCINT7);
}

void simple_delay_ms(uint16_t ms) {
	// Proste opóŸnienie w milisekundach
	for (uint16_t i = 0; i < ms; i++) {
 196:	4f 5f       	subi	r20, 0xFF	; 255
 198:	5f 4f       	sbci	r21, 0xFF	; 255
 19a:	f0 cf       	rjmp	.-32     	; 0x17c <_Z15simple_delay_msj+0x4>
 19c:	08 95       	ret

0000019e <__vector_3>:
			asm volatile("nop");
		}
	}
}

ISR(PCINT0_vect) {
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
	// Debouncing
	simple_delay_ms(50);
 1c0:	82 e3       	ldi	r24, 0x32	; 50
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 bc 00 	call	0x178	; 0x178 <_Z15simple_delay_msj>

	// Sprawdzenie przycisków PB0-PB2
	if (!(PINB & (1 << PINB0))) {
 1c8:	18 99       	sbic	0x03, 0	; 3
 1ca:	03 c0       	rjmp	.+6      	; 0x1d2 <__vector_3+0x34>
		reset_flag = 1;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <reset_flag>
	}
	if (!(PINB & (1 << PINB1))) {
 1d2:	19 99       	sbic	0x03, 1	; 3
 1d4:	03 c0       	rjmp	.+6      	; 0x1dc <__vector_3+0x3e>
		stop_flag = 1;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	}
	if (!(PINB & (1 << PINB2))) {
 1dc:	1a 99       	sbic	0x03, 2	; 3
 1de:	03 c0       	rjmp	.+6      	; 0x1e6 <__vector_3+0x48>
		start_flag = 1;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <start_flag>
	}
	// Sprawdzenie przycisku PB3
	if (!(PINB & (1 << PINB3))) {
 1e6:	1b 99       	sbic	0x03, 3	; 3
 1e8:	27 c0       	rjmp	.+78     	; 0x238 <__vector_3+0x9a>
		// Zwiêkszenie czasu gracza o 1 minutê, a¿ do 20 minut, po czym reset do 0 minut
		if (active_player == 0) {
 1ea:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <active_player>
 1ee:	81 11       	cpse	r24, r1
 1f0:	12 c0       	rjmp	.+36     	; 0x216 <__vector_3+0x78>
			if (player1_minutes < 60) {
 1f2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <player1_minutes>
 1f6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <player1_minutes+0x1>
 1fa:	8c 33       	cpi	r24, 0x3C	; 60
 1fc:	91 05       	cpc	r25, r1
 1fe:	30 f4       	brcc	.+12     	; 0x20c <__vector_3+0x6e>
				player1_minutes++;
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <player1_minutes+0x1>
 206:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <player1_minutes>
 20a:	16 c0       	rjmp	.+44     	; 0x238 <__vector_3+0x9a>
				} else {
				player1_minutes = 0;
 20c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <player1_minutes+0x1>
 210:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <player1_minutes>
 214:	11 c0       	rjmp	.+34     	; 0x238 <__vector_3+0x9a>
			}
			} else {
			if (player2_minutes < 60) {
 216:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <player2_minutes>
 21a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <player2_minutes+0x1>
 21e:	8c 33       	cpi	r24, 0x3C	; 60
 220:	91 05       	cpc	r25, r1
 222:	30 f4       	brcc	.+12     	; 0x230 <__vector_3+0x92>
				player2_minutes++;
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <player2_minutes+0x1>
 22a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <player2_minutes>
 22e:	04 c0       	rjmp	.+8      	; 0x238 <__vector_3+0x9a>
				} else {
				player2_minutes = 0;
 230:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <player2_minutes+0x1>
 234:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <player2_minutes>
			}
		}
	}
	// Sprawdzenie przycisku PB7
	if (!(PINB & (1 << PINB7))) {
 238:	1f 99       	sbic	0x03, 7	; 3
 23a:	03 c0       	rjmp	.+6      	; 0x242 <__vector_3+0xa4>
		button_pressed = 1;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <button_pressed>
	}
}
 242:	ff 91       	pop	r31
 244:	ef 91       	pop	r30
 246:	bf 91       	pop	r27
 248:	af 91       	pop	r26
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	7f 91       	pop	r23
 250:	6f 91       	pop	r22
 252:	5f 91       	pop	r21
 254:	4f 91       	pop	r20
 256:	3f 91       	pop	r19
 258:	2f 91       	pop	r18
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <_Z13display_digithh>:

void display_digit(uint8_t digit, uint8_t value) {
	// Wybierz wyœwietlacz do wyœwietlenia
	PORTC = ~(1 << digit); // U¿ycie negacji, poniewa¿ katody s¹ wspólne
 264:	21 e0       	ldi	r18, 0x01	; 1
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	02 c0       	rjmp	.+4      	; 0x26e <_Z13display_digithh+0xa>
 26a:	22 0f       	add	r18, r18
 26c:	33 1f       	adc	r19, r19
 26e:	8a 95       	dec	r24
 270:	e2 f7       	brpl	.-8      	; 0x26a <_Z13display_digithh+0x6>
 272:	20 95       	com	r18
 274:	28 b9       	out	0x08, r18	; 8

	// Ustaw piny segmentów
	PORTD = segment_data[value];
 276:	e6 2f       	mov	r30, r22
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	e0 50       	subi	r30, 0x00	; 0
 27c:	ff 4f       	sbci	r31, 0xFF	; 255
 27e:	80 81       	ld	r24, Z
 280:	8b b9       	out	0x0b, r24	; 11

	// Krótkie opóŸnienie dla widocznoœci cyfry (multipleksowanie)
	simple_delay_ms(2); // Proste opóŸnienie
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 bc 00 	call	0x178	; 0x178 <_Z15simple_delay_msj>
 28a:	08 95       	ret

0000028c <_Z14update_displayjj>:
}

void update_display(uint16_t minutes, uint16_t seconds) {
 28c:	0f 93       	push	r16
 28e:	1f 93       	push	r17
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	00 d0       	rcall	.+0      	; 0x296 <_Z14update_displayjj+0xa>
 296:	00 d0       	rcall	.+0      	; 0x298 <_Z14update_displayjj+0xc>
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
 29c:	8c 01       	movw	r16, r24
 29e:	fb 01       	movw	r30, r22
	uint8_t digits[4];

	digits[0] = minutes / 10;   // Dziesi¹tki minut
 2a0:	9c 01       	movw	r18, r24
 2a2:	ad ec       	ldi	r26, 0xCD	; 205
 2a4:	bc ec       	ldi	r27, 0xCC	; 204
 2a6:	0e 94 2c 02 	call	0x458	; 0x458 <__umulhisi3>
 2aa:	ac 01       	movw	r20, r24
 2ac:	56 95       	lsr	r21
 2ae:	47 95       	ror	r20
 2b0:	56 95       	lsr	r21
 2b2:	47 95       	ror	r20
 2b4:	56 95       	lsr	r21
 2b6:	47 95       	ror	r20
 2b8:	49 83       	std	Y+1, r20	; 0x01
	digits[1] = minutes % 10;   // Jednoœci minut
 2ba:	ca 01       	movw	r24, r20
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	44 0f       	add	r20, r20
 2c2:	55 1f       	adc	r21, r21
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	44 0f       	add	r20, r20
 2ca:	55 1f       	adc	r21, r21
 2cc:	48 0f       	add	r20, r24
 2ce:	59 1f       	adc	r21, r25
 2d0:	04 1b       	sub	r16, r20
 2d2:	15 0b       	sbc	r17, r21
 2d4:	0a 83       	std	Y+2, r16	; 0x02
	digits[2] = seconds / 10;   // Dziesi¹tki sekund
 2d6:	9f 01       	movw	r18, r30
 2d8:	0e 94 2c 02 	call	0x458	; 0x458 <__umulhisi3>
 2dc:	ac 01       	movw	r20, r24
 2de:	56 95       	lsr	r21
 2e0:	47 95       	ror	r20
 2e2:	56 95       	lsr	r21
 2e4:	47 95       	ror	r20
 2e6:	56 95       	lsr	r21
 2e8:	47 95       	ror	r20
 2ea:	4b 83       	std	Y+3, r20	; 0x03
	digits[3] = seconds % 10;   // Jednoœci sekund
 2ec:	ca 01       	movw	r24, r20
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	44 0f       	add	r20, r20
 2f4:	55 1f       	adc	r21, r21
 2f6:	44 0f       	add	r20, r20
 2f8:	55 1f       	adc	r21, r21
 2fa:	44 0f       	add	r20, r20
 2fc:	55 1f       	adc	r21, r21
 2fe:	48 0f       	add	r20, r24
 300:	59 1f       	adc	r21, r25
 302:	e4 1b       	sub	r30, r20
 304:	f5 0b       	sbc	r31, r21
 306:	ec 83       	std	Y+4, r30	; 0x04

	for (uint8_t i = 0; i < 4; i++) {
 308:	10 e0       	ldi	r17, 0x00	; 0
 30a:	14 30       	cpi	r17, 0x04	; 4
 30c:	60 f4       	brcc	.+24     	; 0x326 <_Z14update_displayjj+0x9a>
		display_digit(i, digits[i]);
 30e:	e1 e0       	ldi	r30, 0x01	; 1
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	ec 0f       	add	r30, r28
 314:	fd 1f       	adc	r31, r29
 316:	e1 0f       	add	r30, r17
 318:	f1 1d       	adc	r31, r1
 31a:	60 81       	ld	r22, Z
 31c:	81 2f       	mov	r24, r17
 31e:	0e 94 32 01 	call	0x264	; 0x264 <_Z13display_digithh>
	digits[0] = minutes / 10;   // Dziesi¹tki minut
	digits[1] = minutes % 10;   // Jednoœci minut
	digits[2] = seconds / 10;   // Dziesi¹tki sekund
	digits[3] = seconds % 10;   // Jednoœci sekund

	for (uint8_t i = 0; i < 4; i++) {
 322:	1f 5f       	subi	r17, 0xFF	; 255
 324:	f2 cf       	rjmp	.-28     	; 0x30a <_Z14update_displayjj+0x7e>
		display_digit(i, digits[i]);
	}
}
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	08 95       	ret

00000338 <_Z12update_timerPVjS0_>:

void update_timer(volatile uint16_t* minutes, volatile uint16_t* seconds) {
 338:	fb 01       	movw	r30, r22
	if (*seconds == 0) {
 33a:	20 81       	ld	r18, Z
 33c:	31 81       	ldd	r19, Z+1	; 0x01
 33e:	23 2b       	or	r18, r19
 340:	99 f4       	brne	.+38     	; 0x368 <_Z12update_timerPVjS0_+0x30>
		if (*minutes == 0) {
 342:	dc 01       	movw	r26, r24
 344:	2d 91       	ld	r18, X+
 346:	3c 91       	ld	r19, X
 348:	11 97       	sbiw	r26, 0x01	; 1
 34a:	23 2b       	or	r18, r19
 34c:	91 f0       	breq	.+36     	; 0x372 <_Z12update_timerPVjS0_+0x3a>
			// Jeœli czas siê skoñczy³, zatrzymaj odliczanie
			return;
			} else {
			// Jeœli sekundy osi¹gnê³y 0, zmniejsz minuty i zresetuj sekundy do 59
			(*minutes)--;
 34e:	2d 91       	ld	r18, X+
 350:	3c 91       	ld	r19, X
 352:	11 97       	sbiw	r26, 0x01	; 1
 354:	21 50       	subi	r18, 0x01	; 1
 356:	31 09       	sbc	r19, r1
 358:	11 96       	adiw	r26, 0x01	; 1
 35a:	3c 93       	st	X, r19
 35c:	2e 93       	st	-X, r18
			*seconds = 59;
 35e:	8b e3       	ldi	r24, 0x3B	; 59
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	91 83       	std	Z+1, r25	; 0x01
 364:	80 83       	st	Z, r24
 366:	08 95       	ret
		}
		} else {
		// W przeciwnym razie zmniejsz sekundy
		(*seconds)--;
 368:	80 81       	ld	r24, Z
 36a:	91 81       	ldd	r25, Z+1	; 0x01
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	91 83       	std	Z+1, r25	; 0x01
 370:	80 83       	st	Z, r24
 372:	08 95       	ret

00000374 <main>:
	}
}

int main(void) {
	// Ustawienie PORTD jako wyjœcie dla segmentów
	DDRD = 0xFF;
 374:	8f ef       	ldi	r24, 0xFF	; 255
 376:	8a b9       	out	0x0a, r24	; 10
	// Ustawienie PORTC jako wyjœcie dla wyboru cyfry
	DDRC = 0x0F;
 378:	8f e0       	ldi	r24, 0x0F	; 15
 37a:	87 b9       	out	0x07, r24	; 7

	init_timer1(); // Inicjalizacja timera
 37c:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z11init_timer1v>
	init_buttons(); // Inicjalizacja przycisków
 380:	0e 94 a5 00 	call	0x14a	; 0x14a <_Z12init_buttonsv>

	uint8_t counting = 0;
 384:	c0 e0       	ldi	r28, 0x00	; 0

	while (1) {
		if (delay_counter >= 1) { // Sprawdzenie czy up³ynê³a 1 sekunda
 386:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <delay_counter>
 38a:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <delay_counter+0x1>
 38e:	89 2b       	or	r24, r25
 390:	b9 f0       	breq	.+46     	; 0x3c0 <main+0x4c>
			delay_counter = 0;
 392:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <delay_counter+0x1>
 396:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <delay_counter>

			if (counting) {
 39a:	cc 23       	and	r28, r28
 39c:	89 f0       	breq	.+34     	; 0x3c0 <main+0x4c>
				if (active_player == 0) {
 39e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <active_player>
 3a2:	81 11       	cpse	r24, r1
 3a4:	07 c0       	rjmp	.+14     	; 0x3b4 <main+0x40>
					update_timer(&player1_minutes, &player1_seconds);
 3a6:	62 e1       	ldi	r22, 0x12	; 18
 3a8:	71 e0       	ldi	r23, 0x01	; 1
 3aa:	84 e1       	ldi	r24, 0x14	; 20
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	0e 94 9c 01 	call	0x338	; 0x338 <_Z12update_timerPVjS0_>
 3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <main+0x4c>
					} else {
					update_timer(&player2_minutes, &player2_seconds);
 3b4:	6e e0       	ldi	r22, 0x0E	; 14
 3b6:	71 e0       	ldi	r23, 0x01	; 1
 3b8:	80 e1       	ldi	r24, 0x10	; 16
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	0e 94 9c 01 	call	0x338	; 0x338 <_Z12update_timerPVjS0_>
				}
			}
		}

		 if (reset_flag) {
 3c0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <reset_flag>
 3c4:	88 23       	and	r24, r24
 3c6:	99 f0       	breq	.+38     	; 0x3ee <main+0x7a>
			 reset_flag = 0;
 3c8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <reset_flag>
			 // Resetuj czas dla obu graczy
			 player1_minutes = 0;
 3cc:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <player1_minutes+0x1>
 3d0:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <player1_minutes>
			 player1_seconds = 0;
 3d4:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <player1_seconds+0x1>
 3d8:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <player1_seconds>
			 player2_minutes = 0;
 3dc:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <player2_minutes+0x1>
 3e0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <player2_minutes>
			 player2_seconds = 0;
 3e4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <player2_seconds+0x1>
 3e8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <player2_seconds>
			 counting = 0;
 3ec:	c0 e0       	ldi	r28, 0x00	; 0
		 }

		if (start_flag) {
 3ee:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <start_flag>
 3f2:	88 23       	and	r24, r24
 3f4:	19 f0       	breq	.+6      	; 0x3fc <main+0x88>
			start_flag = 0;
 3f6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <start_flag>
			counting = 1;
 3fa:	c1 e0       	ldi	r28, 0x01	; 1
		}

		if (stop_flag) {
 3fc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 400:	88 23       	and	r24, r24
 402:	19 f0       	breq	.+6      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
			stop_flag = 0;
 404:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
			counting = 0;
 408:	c0 e0       	ldi	r28, 0x00	; 0
		}

		if (button_pressed) {
 40a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <button_pressed>
 40e:	88 23       	and	r24, r24
 410:	49 f0       	breq	.+18     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
			button_pressed = 0;
 412:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <button_pressed>
			// Prze³¹cz aktywnego gracza
			active_player = !active_player;
 416:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <active_player>
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	91 11       	cpse	r25, r1
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <active_player>
		}

		// Aktualizacja wyœwietlacza
		if (active_player == 0) {
 424:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <active_player>
 428:	81 11       	cpse	r24, r1
 42a:	0b c0       	rjmp	.+22     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
			update_display(player1_minutes, player1_seconds);
 42c:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <player1_seconds>
 430:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <player1_seconds+0x1>
 434:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <player1_minutes>
 438:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <player1_minutes+0x1>
 43c:	0e 94 46 01 	call	0x28c	; 0x28c <_Z14update_displayjj>
 440:	a2 cf       	rjmp	.-188    	; 0x386 <main+0x12>
			} else {
			update_display(player2_minutes, player2_seconds);
 442:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <player2_seconds>
 446:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <player2_seconds+0x1>
 44a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <player2_minutes>
 44e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <player2_minutes+0x1>
 452:	0e 94 46 01 	call	0x28c	; 0x28c <_Z14update_displayjj>
 456:	97 cf       	rjmp	.-210    	; 0x386 <main+0x12>

00000458 <__umulhisi3>:
 458:	a2 9f       	mul	r26, r18
 45a:	b0 01       	movw	r22, r0
 45c:	b3 9f       	mul	r27, r19
 45e:	c0 01       	movw	r24, r0
 460:	a3 9f       	mul	r26, r19
 462:	70 0d       	add	r23, r0
 464:	81 1d       	adc	r24, r1
 466:	11 24       	eor	r1, r1
 468:	91 1d       	adc	r25, r1
 46a:	b2 9f       	mul	r27, r18
 46c:	70 0d       	add	r23, r0
 46e:	81 1d       	adc	r24, r1
 470:	11 24       	eor	r1, r1
 472:	91 1d       	adc	r25, r1
 474:	08 95       	ret

00000476 <_exit>:
 476:	f8 94       	cli

00000478 <__stop_program>:
 478:	ff cf       	rjmp	.-2      	; 0x478 <__stop_program>
